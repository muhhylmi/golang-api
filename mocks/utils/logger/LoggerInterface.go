// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// LogWithContext provides a mock function with given fields: ctx, scope
func (_m *LoggerInterface) LogWithContext(ctx string, scope string) *logrus.Entry {
	ret := _m.Called(ctx, scope)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(string, string) *logrus.Entry); ok {
		r0 = rf(ctx, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// NewLoggerInterface creates a new instance of LoggerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerInterface {
	mock := &LoggerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
