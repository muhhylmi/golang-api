// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "golang-api/modules/users/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: Id
func (_m *Repository) FindById(Id string) (*domain.Users, error) {
	ret := _m.Called(Id)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Users, error)); ok {
		return rf(Id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Users); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: username
func (_m *Repository) FindByUsername(username string) (*domain.Users, error) {
	ret := _m.Called(username)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Users, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Users); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *Repository) Save(user *domain.Users) (*domain.Users, error) {
	ret := _m.Called(user)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Users) (*domain.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.Users) *domain.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
