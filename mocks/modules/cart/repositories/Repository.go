// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "golang-api/modules/cart/models/domain"

	mock "github.com/stretchr/testify/mock"

	web "golang-api/modules/cart/models/web"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: payload
func (_m *Repository) FindAll(payload *web.RequestListCart) ([]*domain.Cart, error) {
	ret := _m.Called(payload)

	var r0 []*domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(*web.RequestListCart) ([]*domain.Cart, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*web.RequestListCart) []*domain.Cart); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(*web.RequestListCart) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: cart
func (_m *Repository) Save(cart *domain.Cart) (*domain.Cart, error) {
	ret := _m.Called(cart)

	var r0 *domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Cart) (*domain.Cart, error)); ok {
		return rf(cart)
	}
	if rf, ok := ret.Get(0).(func(*domain.Cart) *domain.Cart); ok {
		r0 = rf(cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Cart) error); ok {
		r1 = rf(cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
