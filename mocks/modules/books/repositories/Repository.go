// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "golang-api/modules/books/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: bookId
func (_m *Repository) Delete(bookId string) (string, error) {
	ret := _m.Called(bookId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(bookId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(bookId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]*domain.Book, error) {
	ret := _m.Called()

	var r0 []*domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: bookId
func (_m *Repository) FindById(bookId string) (*domain.Book, error) {
	ret := _m.Called(bookId)

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Book, error)); ok {
		return rf(bookId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Book); ok {
		r0 = rf(bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: book
func (_m *Repository) Save(book *domain.Book) (*domain.Book, error) {
	ret := _m.Called(book)

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Book) (*domain.Book, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(*domain.Book) *domain.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: book
func (_m *Repository) Update(book *domain.Book) (*domain.Book, error) {
	ret := _m.Called(book)

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Book) (*domain.Book, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(*domain.Book) *domain.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
