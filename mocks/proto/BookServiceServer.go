// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	proto "golang-api/proto"

	mock "github.com/stretchr/testify/mock"
)

// BookServiceServer is an autogenerated mock type for the BookServiceServer type
type BookServiceServer struct {
	mock.Mock
}

// GrpcCreateBook provides a mock function with given fields: _a0, _a1
func (_m *BookServiceServer) GrpcCreateBook(_a0 context.Context, _a1 *proto.BookDataRequest) (*proto.BookDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.BookDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BookDataRequest) (*proto.BookDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BookDataRequest) *proto.BookDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BookDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.BookDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedBookServiceServer provides a mock function with given fields:
func (_m *BookServiceServer) mustEmbedUnimplementedBookServiceServer() {
	_m.Called()
}

// NewBookServiceServer creates a new instance of BookServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookServiceServer {
	mock := &BookServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
